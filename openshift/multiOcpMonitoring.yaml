apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: ${APP_NAME}
metadata:
  name: ${APP_NAME}
objects:

  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      labels:
        app: ${APP_NAME}
      name: ${APP_NAME}
      namespace: ${NAMESPACE}
    spec:
      lookupPolicy:
        local: false
      tags:
        - name: ${IMAGE_TAG}
          from:
            kind: DockerImage
            name: ${IMAGE_REGISTRY_URL}:${IMAGE_TAG}
          referencePolicy:
            type: Source

  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${APP_NAME}
      name: ${APP_NAME}
      namespace: ${NAMESPACE}
    spec:
      replicas: 1
      selector:
        deploymentconfig: ${APP_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            deploymentconfig: ${APP_NAME}
            app: ${APP_NAME}
        spec:
          containers:
            - image: ${APP_NAME}:${IMAGE_TAG}
              imagePullPolicy: IfNotPresent
              name: ${APP_NAME}
              ports:
                - containerPort: 8080
                  protocol: TCP
              env:
                - name: SAMPLE_APP_NAMESPACE
                  value: ${SAMPLE_APP_NAMESPACE}
                - name: MONITORING_KUBECONFIG
                  value: ${MONITORING_KUBECONFIG}
                - name: MONITORING_CONTEXT_FILTERS
                  value: ${MONITORING_CONTEXT_FILTERS}
          terminationGracePeriodSeconds: 60
      test: false
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${APP_NAME}
            from:
              kind: ImageStreamTag
              name: ${APP_NAME}:${IMAGE_TAG}

  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${APP_NAME}
      name: ${APP_NAME}
      namespace: ${NAMESPACE}
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        deploymentconfig: ${APP_NAME}

  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: ${APP_NAME}
      name: ${APP_NAME}
      namespace: ${NAMESPACE}
    spec:
      port:
        targetPort: 8080-tcp
      to:
        kind: Service
        name: ${APP_NAME}

  # Prometheus

  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: prometheus
      name: prometheus
      namespace: ${NAMESPACE}
    spec:
      ports:
        - name: 9090-tcp
          port: 9090
          protocol: TCP
          targetPort: 9090
      selector:
        deploymentconfig: prometheus

  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: prometheus
      name: prometheus
      namespace: ${NAMESPACE}
    spec:
      replicas: 1
      selector:
        deploymentconfig: prometheus
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            deploymentconfig: prometheus
        spec:
          containers:
            - image: prometheus:latest
              imagePullPolicy: IfNotPresent
              name: prometheus
              ports:
                - containerPort: 9090
                  protocol: TCP
              volumeMounts:
                - mountPath: /etc/prometheus
                  name: prometheus-config
                - mountPath: /prometheus
                  name: prometheus-volume
          volumes:
            - name: prometheus-config
              configMap:
                defaultMode: 420
                name: prometheus
            - name: prometheus-volume
              emptyDir: { }
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - prometheus
            from:
              kind: ImageStreamTag
              name: prometheus:latest

  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      labels:
        app: prometheus
      name: prometheus
      namespace: ${NAMESPACE}
    spec:
      lookupPolicy:
        local: false
      tags:
        - from:
            kind: DockerImage
            name: quay.io/prometheus/prometheus
          name: latest
          referencePolicy:
            type: Source

  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: prometheus
      name: prometheus
      namespace: ${NAMESPACE}
    spec:
      port:
        targetPort: 9090-tcp
      to:
        kind: Service
        name: prometheus

  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: prometheus
      namespace: ${NAMESPACE}
    data:
      prometheus.yml: |
        global:
          scrape_interval: 30s
          evaluation_interval: 5s
        scrape_configs:
          - job_name: multi-ocp-monitoring
            scrape_interval: 30s
            scrape_timeout: 10s
            metrics_path: /q/metrics
            scheme: http
            static_configs:
              - targets: [${APP_NAME}.${NAMESPACE}.svc.cluster.local:8080]

parameters:
  - name: NAMESPACE
    description: Project name for the Multi OCP Monitoring deployment
    displayName: Project name
    required: true
  - name: APP_NAME
    description: Application name
    displayName: Application name
    value: multi-ocp-monitoring
  - name: IMAGE_REGISTRY_URL
    description: Multi OCP Monitoring image registry URL (for example quay.io/repository/image)
    displayName: Multi OCP Monitoring image registry URL
    required: true
  - name: IMAGE_TAG
    description: Multi OCP Monitoring image tag
    displayName: Multi OCP Monitoring image tag
    required: true
  - name: SAMPLE_APP_NAMESPACE
    description: Project name for sample application
    displayName: Project name for sample application
    value: infra-sample-app
  - name: MONITORING_KUBECONFIG
    description: Kubeconfig with clusters to be monitored
    displayName: Kubeconfig with clusters to be monitored
    required: true
  - name: MONITORING_CONTEXT_FILTERS
    description: Filter for contexts in the provided kubeconfig
    displayName: Filter for contexts in the provided kubeconfig
